reticulate::repl_python()
# 필요한 라이브러리 로드
library(MASS) # 데이터 생성을 위해
library(caret) # 모델 평가를 위해
# 시뮬레이션 데이터 생성 함수
generate_data <- function(n, beta) {
x1 <- rnorm(n)
x2 <- rnorm(n)
z <- 1 + beta * x1 + beta * x2
pr <- 1 / (1 + exp(-z))
y <- rbinom(n, 1, pr)
data.frame(x1, x2, y)
}
# 시뮬레이션 데이터 생성
set.seed(123)
beta <- 0.5 # 파라미터 설정
data <- generate_data(1000, beta)
# 로지스틱 회귀 모델 적합
model <- glm(y ~ x1 + x2, data = data, family = "binomial")
# 모델 요약
summary(model)
# 모델 성능 평가 (정확도, AUC 등)
predictions <- predict(model, data, type = "response")
roc_curve <- roc(response = data$y, predictor = as.numeric(predictions))
print(auc(roc_curve))
# 모델 성능 평가 (정확도, AUC 등)
predictions <- predict(model, data, type = "response")
roc_curve <- roc(response = data$y, predictor = as.numeric(predictions))
# 필요한 라이브러리 로드
library(MASS) # 데이터 생성을 위해
library(caret) # 모델 평가를 위해
library(pROC)
# 시뮬레이션 데이터 생성 함수
generate_data <- function(n, beta) {
x1 <- rnorm(n)
x2 <- rnorm(n)
z <- 1 + beta * x1 + beta * x2
pr <- 1 / (1 + exp(-z))
y <- rbinom(n, 1, pr)
data.frame(x1, x2, y)
}
# 시뮬레이션 데이터 생성
set.seed(123)
beta <- 0.5 # 파라미터 설정
data <- generate_data(1000, beta)
# 로지스틱 회귀 모델 적합
model <- glm(y ~ x1 + x2, data = data, family = "binomial")
# 모델 요약
summary(model)
# 모델 성능 평가 (정확도, AUC 등)
predictions <- predict(model, data, type = "response")
roc_curve <- roc(response = data$y, predictor = as.numeric(predictions))
print(auc(roc_curve))
generate_data
# 시뮬레이션 데이터 생성 함수
generate_data <- function(n, beta) {
x1 <- rnorm(n)
x2 <- rnorm(n)
z <- 1 + beta * x1 + beta * x2
pr <- 1 / (1 + exp(-z))
y <- rbinom(n, 1, pr)
data.frame(x1, x2, y)
}
# 시뮬레이션 데이터 생성
set.seed(123)
beta <- 0.5 # 파라미터 설정
data <- generate_data(1000, beta)
data
# 0.Loading Data ===============================================================================
Data_2 = readRDS("/Users/Ido/Library/CloudStorage/Dropbox/GitHub/Papers___Data/GitHub___Data___Papers___MS/GitHub___Data___Papers___MS___Data/Combiend___FunImgARglobalCWSF___Subjects_ADCN.rds")
class(Data_2)
names(Data_2)
## Unlist
X = rbind(Data_2$Train_X, Data_2$Test_X)
dim(X)
View(X)
# 0.Loading Data ===============================================================================
# Load
Data = readRDS("/Users/Ido/Library/CloudStorage/Dropbox/GitHub/Papers___Data/GitHub___Data___Papers___MS/GitHub___Data___Papers___MS___Data/Combiend___FunImgARglobalCWSF___Subjects_ADCN.rds")
Train_X = Data$Train_X
Train_y = Data$Train_y
## Unlist
Train_X = Data$Train_X
Train_y = Data$Train_y
Test_X = Data$Test_X
Test_y = Data$Test_y
# Extract X
X = rbind(Data$Train_X, Data$Test_X)
dim(X)
View(X)
# 1.Sampling index
Index = 1:nrow(X)
length(Index)
# 1.Sampling index
index = 1:nrow(X)
length(index)
# 1.Sampling ===============================================================================
## @1.Index --------------------------------------------------------------------------------------------
N = 100 # sampling number
index = 1:nrow(X)
sampled_index = sample(x = index, n = N, replace = T)
sampled_index = sample(x = index, size = N, replace = T)
sampled_index
length(sampled_index)
## @2.Diagnosis --------------------------------------------------------------------------------------------
### Prop : CN(80%), AD(20%)
sampled_diagnosis = c(rep(0, 80), rep(1, 20))
sampled_diagnosis
X_new = X[sampled_index, ]
dim(X_new)
## @ 3.New data --------------------------------------------------------------------------------------------
X_sampled = X[sampled_index, ]
X_New = cbind(sampled_diagnosis, X_sampled)
X_New
View(X_New)
reticulate::repl_python()
replace_str_filenames = function(directory, old_string, new_string, recursive = FALSE) {
# 지정된 경로의 모든 폴더 및 파일 목록을 가져옴
files <- list.files(directory, full.names = TRUE, recursive = recursive)
# 폴더 및 파일에 대해 반복
for (file in files) {
# 파일의 새 이름 생성
new_name <- gsub(old_string, new_string, file)
# 새 이름으로 파일 또는 폴더를 이동
file.rename(file, new_name)
}
cat("Renaming complete.\n")
}
# 예시로 사용할 폴더와 파일 경로 설정
directory <- "/Users/Ido/Library/CloudStorage/GoogleDrive-yido.jee@gmail.com/내 드라이브/Obsidian/SecondBrain_Obsidian/🌸Stat_Bayesian(베이지안)/🟥Textbook/🟧데이터 분석을 위한 베이지안 통계 모델링(마츠우라)"
old_string <- "old_string"
old_string <- "🟪"
new_string <- "🟧"
# 함수 호출하여 파일 및 폴더 이름 변경
rename_files(directory, old_string, new_string, recursive = TRUE)
# 함수 호출하여 파일 및 폴더 이름 변경
replace_str_filenames(directory, old_string, new_string, recursive = TRUE)
new_string <- "🟨"
# 함수 호출하여 파일 및 폴더 이름 변경
replace_str_filenames(directory, old_string, new_string, recursive = TRUE)
warnings()
replace_str_filenames = function(directory, old_string, new_string, recursive = FALSE) {
# 지정된 경로의 모든 폴더 및 파일 목록을 가져옴
files <- list.files(directory, full.names = TRUE, recursive = recursive)
# 폴더 및 파일에 대해 반복
for (file in files) {
# 파일의 새 이름 생성
new_name <- gsub(old_string, new_string, file)
# 새 이름으로 파일 또는 폴더를 이동
file.rename(file, new_name)
}
cat("Renaming complete.\n")
}
# 예시로 사용할 폴더와 파일 경로 설정
directory <- "/Users/Ido/Library/CloudStorage/GoogleDrive-yido.jee@gmail.com/내 드라이브/Obsidian/SecondBrain_Obsidian/🌸Stat_Bayesian(베이지안)/🟥Textbook/🟧데이터 분석을 위한 베이지안 통계 모델링(마츠우라)"
old_string <- "🟪"
new_string <- "🟨"
# 함수 호출하여 파일 및 폴더 이름 변경
replace_str_filenames(directory, old_string, new_string, recursive = TRUE)
warnings()
reticulate::repl_python()
